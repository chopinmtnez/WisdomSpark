package com.albertowisdom.wisdomspark.utils

/**
 * Obtiene el emoji correspondiente a una categor√≠a
 */
fun getCategoryEmoji(category: String): String {
    return when (category.lowercase().trim()) {
        "motivaci√≥n" -> "üî•"
        "vida" -> "üå±"
        "sue√±os" -> "‚ú®"
        "perseverancia" -> "üí™"
        "educaci√≥n" -> "üìö"
        "creatividad" -> "üé®"
        "√©xito" -> "üèÜ"
        "autenticidad" -> "ü¶ã"
        "felicidad" -> "üòä"
        "sabidur√≠a" -> "üß†"
        "confianza" -> "üíé"
        "progreso" -> "üìà"
        "excelencia" -> "‚≠ê"
        "acci√≥n" -> "‚ö°"
        "liderazgo" -> "üëë"
        "negocios" -> "üíº"
        "espiritualidad" -> "üôè"
        "amor" -> "‚ù§Ô∏è"
        "familia" -> "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
        "amistad" -> "ü§ù"
        "tiempo" -> "‚è∞"
        "dinero" -> "üí∞"
        "salud" -> "üíö"
        "paz" -> "‚òÆÔ∏è"
        "esperanza" -> "üåà"
        "gratitud" -> "üôè"
        "cambio" -> "üîÑ"
        "oportunidad" -> "üö™"
        "libertad" -> "üïäÔ∏è"
        "naturaleza" -> "üåø"
        else -> "üí´"
    }
}

/**
 * Obtiene el color primario asociado a una categor√≠a
 */
fun getCategoryColor(category: String): androidx.compose.ui.graphics.Color {
    return when (category.lowercase().trim()) {
        "motivaci√≥n" -> androidx.compose.ui.graphics.Color(0xFFFF6B35) // Naranja fuego
        "vida" -> androidx.compose.ui.graphics.Color(0xFF4CAF50) // Verde vida
        "sue√±os" -> androidx.compose.ui.graphics.Color(0xFF9C27B0) // P√∫rpura m√°gico
        "perseverancia" -> androidx.compose.ui.graphics.Color(0xFF2196F3) // Azul fuerte
        "educaci√≥n" -> androidx.compose.ui.graphics.Color(0xFF3F51B5) // Azul acad√©mico
        "creatividad" -> androidx.compose.ui.graphics.Color(0xFFE91E63) // Rosa creativo
        "√©xito" -> androidx.compose.ui.graphics.Color(0xFFFFC107) // Dorado √©xito
        "autenticidad" -> androidx.compose.ui.graphics.Color(0xFF00BCD4) // Cian aut√©ntico
        "felicidad" -> androidx.compose.ui.graphics.Color(0xFFFFEB3B) // Amarillo feliz
        "sabidur√≠a" -> androidx.compose.ui.graphics.Color(0xFF795548) // Marr√≥n sabio
        "confianza" -> androidx.compose.ui.graphics.Color(0xFF607D8B) // Azul gris confiable
        "progreso" -> androidx.compose.ui.graphics.Color(0xFF8BC34A) // Verde progreso
        "excelencia" -> androidx.compose.ui.graphics.Color(0xFFFF9800) // Naranja excelencia
        "acci√≥n" -> androidx.compose.ui.graphics.Color(0xFFF44336) // Rojo acci√≥n
        else -> androidx.compose.ui.graphics.Color(0xFF9E9E9E) // Gris por defecto
    }
}

/**
 * Obtiene una descripci√≥n de la categor√≠a
 */
fun getCategoryDescription(category: String): String {
    return when (category.lowercase().trim()) {
        "motivaci√≥n" -> "Citas que encienden tu pasi√≥n interior"
        "vida" -> "Reflexiones sobre el arte de vivir"
        "sue√±os" -> "Inspiraci√≥n para alcanzar lo imposible"
        "perseverancia" -> "Fuerza para superar cualquier obst√°culo"
        "educaci√≥n" -> "El poder transformador del conocimiento"
        "creatividad" -> "Desata tu potencial creativo"
        "√©xito" -> "El camino hacia tus logros m√°s grandes"
        "autenticidad" -> "S√© fiel a quien realmente eres"
        "felicidad" -> "Encuentra la alegr√≠a en cada momento"
        "sabidur√≠a" -> "Conocimiento que transforma vidas"
        "confianza" -> "Cree en tu poder interior"
        "progreso" -> "Avanza paso a paso hacia tus metas"
        "excelencia" -> "La b√∫squeda de la mejor versi√≥n de ti"
        "acci√≥n" -> "Transforma tus pensamientos en realidad"
        "liderazgo" -> "Inspira y gu√≠a a otros hacia el √©xito"
        "negocios" -> "Sabidur√≠a para el mundo empresarial"
        "espiritualidad" -> "Conecta con tu ser interior"
        "amor" -> "El poder transformador del amor"
        "familia" -> "Los lazos que nos fortalecen"
        "amistad" -> "Relaciones que enriquecen el alma"
        "tiempo" -> "El recurso m√°s valioso que tenemos"
        "dinero" -> "Sabidur√≠a financiera para la vida"
        "salud" -> "Cuida tu templo, cuida tu vida"
        "paz" -> "Encuentra la serenidad interior"
        "esperanza" -> "La luz que gu√≠a en la oscuridad"
        "gratitud" -> "Aprecia las bendiciones de la vida"
        "cambio" -> "Abraza las transformaciones"
        "oportunidad" -> "Reconoce las puertas que se abren"
        "libertad" -> "Vive sin limitaciones autoimpuestas"
        "naturaleza" -> "Sabidur√≠a de la madre tierra"
        else -> "Sabidur√≠a para inspirar tu d√≠a"
    }
}

/**
 * Obtiene todas las categor√≠as disponibles con sus datos
 */
data class CategoryInfo(
    val name: String,
    val emoji: String,
    val color: androidx.compose.ui.graphics.Color,
    val description: String
)

fun getAllCategories(): List<CategoryInfo> {
    val categories = listOf(
        "Motivaci√≥n", "Vida", "Sue√±os", "Perseverancia", "Educaci√≥n",
        "Creatividad", "√âxito", "Autenticidad", "Felicidad", "Sabidur√≠a",
        "Confianza", "Progreso", "Excelencia", "Acci√≥n"
    )
    
    return categories.map { category ->
        CategoryInfo(
            name = category,
            emoji = getCategoryEmoji(category),
            color = getCategoryColor(category),
            description = getCategoryDescription(category)
        )
    }
}

/**
 * Obtiene categor√≠as populares (las m√°s utilizadas)
 */
fun getPopularCategories(): List<String> {
    return listOf("Motivaci√≥n", "Vida", "√âxito", "Felicidad", "Sue√±os", "Sabidur√≠a")
}

/**
 * Verifica si una categor√≠a existe
 */
fun isValidCategory(category: String): Boolean {
    val validCategories = listOf(
        "motivaci√≥n", "vida", "sue√±os", "perseverancia", "educaci√≥n",
        "creatividad", "√©xito", "autenticidad", "felicidad", "sabidur√≠a",
        "confianza", "progreso", "excelencia", "acci√≥n", "liderazgo",
        "negocios", "espiritualidad", "amor", "familia", "amistad",
        "tiempo", "dinero", "salud", "paz", "esperanza", "gratitud",
        "cambio", "oportunidad", "libertad", "naturaleza"
    )
    return category.lowercase().trim() in validCategories
}

/**
 * Obtiene sugerencias de categor√≠as basadas en texto
 */
fun getSuggestedCategories(text: String): List<String> {
    val lowerText = text.lowercase()
    val suggestions = mutableSetOf<String>()
    
    // Mapeo de palabras clave a categor√≠as
    val keywordMap = mapOf(
        listOf("motivar", "inspirar", "fuerza", "poder") to "Motivaci√≥n",
        listOf("vivir", "existir", "ser", "experiencia") to "Vida",
        listOf("sue√±o", "meta", "objetivo", "aspiraci√≥n") to "Sue√±os",
        listOf("perseverar", "resistir", "luchar", "continuar") to "Perseverancia",
        listOf("aprender", "estudiar", "conocimiento", "ense√±ar") to "Educaci√≥n",
        listOf("crear", "arte", "innovar", "imaginar") to "Creatividad",
        listOf("lograr", "triunfar", "ganar", "alcanzar") to "√âxito",
        listOf("aut√©ntico", "real", "verdadero", "genuino") to "Autenticidad",
        listOf("feliz", "alegr√≠a", "contento", "gozo") to "Felicidad",
        listOf("sabio", "inteligente", "prudente", "conocer") to "Sabidur√≠a",
        listOf("confiar", "seguro", "creer", "fe") to "Confianza",
        listOf("avanzar", "mejorar", "crecer", "desarrollar") to "Progreso",
        listOf("excelente", "perfecto", "mejor", "calidad") to "Excelencia",
        listOf("actuar", "hacer", "ejecutar", "realizar") to "Acci√≥n"
    )
    
    // Buscar coincidencias
    keywordMap.forEach { (keywords, category) ->
        if (keywords.any { keyword -> lowerText.contains(keyword) }) {
            suggestions.add(category)
        }
    }
    
    // Si no hay sugerencias espec√≠ficas, devolver categor√≠as populares
    return if (suggestions.isEmpty()) {
        getPopularCategories().take(3)
    } else {
        suggestions.take(3).toList()
    }
}

/**
 * Obtiene estad√≠sticas de una categor√≠a
 */
data class CategoryStats(
    val name: String,
    val emoji: String,
    val totalQuotes: Int,
    val favoriteQuotes: Int,
    val lastUsed: String?
)

/**
 * Normaliza el nombre de una categor√≠a
 */
fun normalizeCategory(category: String): String {
    return category.trim()
        .lowercase()
        .replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }
}

/**
 * Obtiene el gradiente de colores para una categor√≠a
 */
fun getCategoryGradient(category: String): List<androidx.compose.ui.graphics.Color> {
    val primaryColor = getCategoryColor(category)
    return listOf(
        primaryColor.copy(alpha = 0.8f),
        primaryColor.copy(alpha = 0.4f),
        primaryColor.copy(alpha = 0.1f)
    )
}
